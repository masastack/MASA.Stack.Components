@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h5>Default SDataTable</h5>
    <SDataTable Headers="_headers" Items="forecasts" HideDefaultFooter ItemsPerPage="5" Class="elevation-1">
        <FooterContent>
            <SDataTableFooter Class="mb-4 mt-2" Total="100" Page=1 PageSize=20 />
        </FooterContent>
    </SDataTable>

    <h5>SDataTable with custom ItemColContent</h5>
    <SDataTable Headers="_headers" Items="forecasts" HideDefaultFooter ItemsPerPage="5" Class="elevation-1">
        <ItemColContent>
            <SItemCol Value="@context.Value" ChippedEnum
                      EnumColorFormatter="EnumColorFormatter">
            </SItemCol>
        </ItemColContent>
        <FooterContent>
            <SDataTableFooter Class="mb-4 mt-2" Total="100" Page=1 PageSize=20 />
        </FooterContent>
    </SDataTable>
}

@code {

    private List<DataTableHeader<WeatherForecast>> _headers = new List<DataTableHeader<WeatherForecast>>
    {
        new() { Text = "Date", Value = nameof(WeatherForecast.Date) },
        new() { Text = "Temp. (C)", Value = nameof(WeatherForecast.TemperatureC) },
        new() { Text = "Temp. (F)", Value = nameof(WeatherForecast.TemperatureF) },
        new() { Text = "Summary", Value = nameof(WeatherForecast.Summary), Sortable = false },
        new() { Text = "Level", Value = nameof(WeatherForecast.Level), Sortable = false }
    };

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    private string EnumColorFormatter(Enum e)
    {
        if (e is not Level level) return string.Empty;

        return level switch
        {
            Level.Normal => "grey",
            Level.Low => "pink",
            Level.High => "red",
            _ => string.Empty
        };
    }

}
