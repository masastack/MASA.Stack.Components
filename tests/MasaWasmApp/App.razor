@using System.Reflection
@using Masa.Contrib.StackSdks.Caller;
@using Masa.Stack.Components.Shared
@using MasaWasmApp.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@* @inject TokenProvider TokenProvider *@

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="additionalAssemblies">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p role="alert">You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <MApp>
                <NotFound />
            </MApp>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {

    private List<Assembly> additionalAssemblies = new();

    // [Parameter]
    // public TokenProvider InitialState { get; set; } = null!;

    public App()
    {
        var masaStackComponentsAssembly = typeof(Masa.Stack.Components.UserCenter).Assembly;
        additionalAssemblies.Add(masaStackComponentsAssembly);
    }

    // protected override Task OnInitializedAsync()
    // {
    //     TokenProvider.AccessToken = InitialState.AccessToken;
    //     TokenProvider.RefreshToken = InitialState.RefreshToken;
    //     TokenProvider.IdToken = InitialState.IdToken;

    //     return base.OnInitializedAsync();
    // }
}
