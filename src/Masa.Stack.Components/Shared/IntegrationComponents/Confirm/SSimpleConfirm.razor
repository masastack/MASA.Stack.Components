@inherits Masa.Blazor.Popup.Components.PopupComponentBase

<MDialog @bind-Value="@Visible"
         Class="pa-6"
         ContentClass="pa-6 white rounded-5"
         Width="400">
    @if (!HideCloseIcon)
    {
        <div class="d-flex justify-end">
            <MButton Small Icon Color="emphasis" OnClick="HandleOnCancel">
            <SIcon>mdi-close</SIcon>
            </MButton>
        </div>
    }
    <div class="d-flex justify-center align-center my-3">
        @if (!string.IsNullOrWhiteSpace(titleIcon))
        {
            <MIcon Color="@iconColor" Class="mr-3">@titleIcon</MIcon>
        }
        <span class="h6 emphasis2--text">
            @(Title ?? T("OperationConfirmation"))
        </span>
    </div>

    <div class="regular2--text btn text-center my-3 @ContentClass">
        @Content
    </div>

    <div class="d-flex justify-space-around align-center mt-9">
        @if (!HideCancel)
        {
            <SAutoLoadingButton Color="primary" Large Rounded Outlined Width="150" OnClick="HandleOnCancel">@ComputedCancelText</SAutoLoadingButton>
        }
        <SAutoLoadingButton Color="@okColor" Class="fill--text" Rounded Large Width="150" OnClick="HandleOnOk">@ComputedOkText</SAutoLoadingButton>
    </div>

</MDialog>

@code {
    [CascadingParameter]
    public I18n LanguageProvider
    {
        get => _languageProvider ?? throw new Exception("please inject I18n!");
        set => _languageProvider = value;
    }

    [Parameter]

    public AlertTypes Type { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Content { get; set; }

    [Parameter]
    public bool HideCloseIcon { get; set; }

    [Parameter]
    public bool HideCancel { get; set; }

    [Parameter]
    public string? CancelText { get; set; }

    [Parameter]
    public string? OkText { get; set; }

    [Parameter]
    public string OkClass { get; set; } = string.Empty;

    [Parameter]
    public string ContentClass { get; set; } = string.Empty;

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnOk { get; set; }

    private I18n? _languageProvider;
    private string titleIcon = string.Empty;
    private string iconColor = string.Empty;
    private string okColor = "primary";
    private string ComputedCancelText => CancelText ?? T("Cancel");
    private string ComputedOkText => OkText ?? T("Ok");

    public virtual async Task HandleOnCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }

        Visible = false;
        await SetResult(false);
    }

    public virtual async Task HandleOnOk()
    {
        PopupOkEventArgs<bool> args = new(true);

        if (OnOk.HasDelegate)
        {
            await OnOk.InvokeAsync(args);
        }

        Visible = false;
        await SetResult(true);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        switch (Type)
        {
            case AlertTypes.Warning:
                titleIcon = "mdi-alert";
                okColor = "red";
                iconColor = "red";
                break;
            case AlertTypes.Error:
                titleIcon = "mdi-alert";
                okColor = "red";
                iconColor = "red";
                break;
            default:
                titleIcon = string.Empty;
                okColor = "primary";
                iconColor = string.Empty;
                break;
        }
    }

    private string T(string key)
    {
        return LanguageProvider.T(key);
    }

    private async Task SetResult(bool value)
    {
        await ClosePopupAsync(value);
    }
}
