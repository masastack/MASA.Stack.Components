@namespace Masa.Stack.Components.Layouts
@using Masa.BuildingBlocks.StackSdks.Auth.Contracts
@using Masa.BuildingBlocks.StackSdks.Auth.Contracts.Consts
@using Microsoft.AspNetCore.Identity
@inherits MasaComponentBase
@inject IAuthClient AuthClient
@inject MasaUser MasaUser
@inject GlobalConfig GlobalConfig
@inject AuthenticationStateProvider AuthenticationStateProvider

<MMenu @bind-Value="@_menuVisible" OffsetY NudgeTop="-8" CloseOnContentClick="false"
       ContentClass="px-4 py-2" MaxWidth="280" MinWidth="280">
    <ActivatorContent>
        <MAvatar @attributes="@context.Attrs" Size=40>
            <MImage Src="@avatar"></MImage>
        </MAvatar>
    </ActivatorContent>
    <ChildContent>
        <MList>
            <SListItem Medium Href="/user-center">
                <MListItemIcon Class="mr-4">
                    <SIcon Color="emphasis2">mdi-account-circle</SIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>
                        <span class="regular--text body">@T("UserInfo")</span>
                    </MListItemTitle>
                </MListItemContent>
            </SListItem>
            <SListItem Medium OnClick="() => { UpdatePasswordDialogVisible = true; _menuVisible = false; }">
                <MListItemIcon Class="mr-4">
                    <SIcon Color="emphasis2">mdi-pencil</SIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>
                        <span class="regular--text body">@T("UpdatePassword")</span>
                    </MListItemTitle>
                </MListItemContent>
            </SListItem>
            @if (!string.IsNullOrWhiteSpace(Layout.TeamRouteFormat))
            {
                <MDivider></MDivider>
                <MListGroup @bind-Value="_showChangeTeam" NoAction Style="">
                    <PrependIconContent>
                        <MAvatar Width="24" Height="24" MinHeight="24" MinWidth="24" Style="margin-right: 10px;">
                            <MImage Src="@CurrentTeam.Avatar"></MImage>
                        </MAvatar>
                    </PrependIconContent>
                    <ActivatorContent>
                        <MListItemContent>
                            <MListItemTitle>@CurrentTeam.Name</MListItemTitle>
                        </MListItemContent>
                    </ActivatorContent>
                    <ChildContent>
                        <MListItemGroup Value="_currentTeamId" ValueChanged="CurrentTeamChanged">
                            @foreach (var team in _teams)
                            {
                                <MListItem Value="@team.Id.ToString()">
                                    <MListItemAvatar Width="24" Height="24" MinHeight="24" MinWidth="24">
                                        <MImage Src="@team.Avatar"></MImage>
                                    </MListItemAvatar>
                                    <MListItemContent>
                                        <MListItemTitle>@team.Name</MListItemTitle>
                                    </MListItemContent>
                                </MListItem>
                            }
                        </MListItemGroup>
                    </ChildContent>
                </MListGroup>
            }
            <MDivider></MDivider>
            <SListItem Medium OnClick="HandleSignOut">
                <MListItemIcon Class="mr-4">
                    <SIcon Color="emphasis2">mdi-logout</SIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>
                        <span class="regular--text body">@T("Logout")</span>
                    </MListItemTitle>
                </MListItemContent>
            </SListItem>

        </MList>
    </ChildContent>
</MMenu>

<UpdatePasswordModal @bind-value="UpdatePasswordDialogVisible" />

@code {

    [CascadingParameter]
    public SLayout Layout { get; set; } = null!;

    public bool UpdatePasswordDialogVisible { get; set; }
    string avatar = "https://cdn.masastack.com/stack/images/avatar/mr.gu.svg";

    bool _menuVisible = false, _showChangeTeam;
    StringNumber _currentTeamId;
    List<TeamModel> _teams = new();

    public TeamModel CurrentTeam => _teams.FirstOrDefault(t => t.Id.ToString() == _currentTeamId) ?? new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await AuthClient.UserService.GetCurrentUserAsync();
            if (!string.IsNullOrWhiteSpace(user.Avatar))
            {
                avatar = user.Avatar;
            }
            _teams = await AuthClient.TeamService.GetUserTeamsAsync();
            _currentTeamId = MasaUser.CurrentTeamId.ToString();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void HandleSignOut()
    {
        if (Layout.OnSignOut != null && Layout.OnSignOut.Invoke())
        {
            return;
        }
        Layout.NavigationManager.NavigateTo("/Account/Logout", true);
    }

    private async Task CurrentTeamChanged(StringNumber teamId)
    {
        var gTeamId = Guid.Parse(teamId.AsT0);
        await AuthClient.UserService.SetCurrentTeamAsync(gTeamId);
        await AuthenticationStateProvider.UpsertClaimAsync(IdentityClaimConsts.CURRENT_TEAM, teamId.ToString());
        GlobalConfig.CurrentTeamId = gTeamId;
        _currentTeamId = teamId;
        _showChangeTeam = false;
        StateHasChanged();
    }
}
