@namespace Masa.Stack.Components.Layouts
@using Masa.BuildingBlocks.StackSdks.Auth.Contracts
@using Masa.BuildingBlocks.StackSdks.Auth.Contracts.Consts
@using Microsoft.AspNetCore.Identity
@inherits MasaComponentBase
@inject IAuthClient AuthClient
@inject MasaUser MasaUser
@inject GlobalConfig GlobalConfig
@inject AuthenticationStateProvider AuthenticationStateProvider

<MMenu @bind-Value="@_menuVisible" OffsetY NudgeTop="-8" CloseOnContentClick="false"
       ContentClass="px-4 py-2">
    <ActivatorContent>
        <MAvatar @attributes="@context.Attrs" Size=40>
            <MImage Src="@avatar"></MImage>
        </MAvatar>
    </ActivatorContent>
    <ChildContent>
        <MList>
            <SListItem Medium Href="/user-center">
                <MListItemIcon Class="mr-4">
                    <SIcon Color="emphasis2">mdi-account-circle</SIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>
                        <span class="regular--text body">@T("UserInfo")</span>
                    </MListItemTitle>
                </MListItemContent>
            </SListItem>
            <SListItem Medium OnClick="() => { _updatePasswordModal.Open(); _menuVisible = false; }">
                <MListItemIcon Class="mr-4">
                    <SIcon Color="emphasis2">mdi-pencil</SIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>
                        <span class="regular--text body">@T("UpdatePassword")</span>
                    </MListItemTitle>
                </MListItemContent>
            </SListItem>
            @if (!string.IsNullOrWhiteSpace(Layout.TeamRouteFormat))
            {
                <MDivider></MDivider>
                <SListItem>
                    <SSelect Value="@_currentTeam" ValueChanged="CurrentTeamChanged" TItem="KeyValuePair<Guid,string>" TValue="Guid" TItemValue="Guid"
                        Items=_teams ItemText="v => v.Value" ItemValue="v=> v.Key" Class="no-border" />
                </SListItem>
            }
            <MDivider></MDivider>
            <SListItem Medium OnClick="HandleSignOut">
                <MListItemIcon Class="mr-4">
                    <SIcon Color="emphasis2">mdi-logout</SIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>
                        <span class="regular--text body">@T("Logout")</span>
                    </MListItemTitle>
                </MListItemContent>
            </SListItem>

        </MList>
    </ChildContent>
</MMenu>

<UpdatePasswordModal @ref="_updatePasswordModal"></UpdatePasswordModal>

@code {

    [CascadingParameter]
    public SLayout Layout { get; set; } = null!;

    UpdatePasswordModal _updatePasswordModal = null!;
    string avatar = "https://cdn.masastack.com/stack/images/avatar/mr.gu.svg";

    bool _menuVisible = false;
    Guid _currentTeam;
    List<KeyValuePair<Guid, string>> _teams = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var user = await AuthClient.UserService.GetCurrentUserAsync();
            if (!string.IsNullOrWhiteSpace(user.Avatar))
            {
                avatar = user.Avatar;
            }
            var teams = await AuthClient.TeamService.GetUserTeamsAsync();
            _currentTeam = MasaUser.CurrentTeamId;
            _teams = teams.Select(t => new KeyValuePair<Guid, string>(t.Id, t.Name)).ToList();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void HandleSignOut()
    {
        if (Layout.OnSignOut!=null && Layout.OnSignOut.Invoke())
        {
            return;
        }
        Layout.NavigationManager.NavigateTo("/Account/Logout", true);
    }

    private async Task CurrentTeamChanged(Guid teamId)
    {
        await AuthClient.UserService.SetCurrentTeamAsync(teamId);
        await AuthenticationStateProvider.UpsertClaimAsync(IdentityClaimConsts.CURRENT_TEAM, teamId.ToString());
        GlobalConfig.CurrentTeamId = teamId;
        StateHasChanged();
    }
}
