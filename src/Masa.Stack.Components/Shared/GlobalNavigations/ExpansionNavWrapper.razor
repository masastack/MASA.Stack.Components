@namespace Masa.Stack.Components.Shared.GlobalNavigations
@inherits MasaComponentBase

@{
    var indeterminate = Value.State == ExpansionMenuState.Indeterminate;
    var selected = Value.State == ExpansionMenuState.Selected;
    var isFavorited = Value.State == ExpansionMenuState.Favorite;
}

<div style="@GetIsDisplayStyle(!Value.Hidden)">
    <MHover Disabled="Value.Disabled">
        @if (Value.Type == ExpansionMenuType.Nav)
        {
            <MListItem @attributes="@context.Attrs" Class="@GetClass(context.Hover)" Value="Value.Id" Disabled="Value.Disabled"
                       OnClick="ItemClick" ActiveClass="GetActiveClass()">
                <ItemContent Context="item">
                    <MListItemContent>
                        <MListItemTitle Style="@(Value.State == ExpansionMenuState.Selected?"color: #323D6F;":"")">
                            @DT(Value.Name)
                        </MListItemTitle>
                    </MListItemContent>
                    <MListItemAction Class="ma-0" Style="@GetIsDisplayStyle(context.Hover)">
                        @if (Value.MetaData.Situation == ExpansionMenuSituation.Authorization)
                        {
                            <MCheckbox Color="primary" Indeterminate=indeterminate Dense Value="@(indeterminate || selected)" TValue="bool" />
                        }
                        else if (Value.MetaData.Situation == ExpansionMenuSituation.Favorite)
                        {
                            <SAutoLoadingButton Icon XSmall Color="@(isFavorited ? "#FFB547" : "")" OnClick="ItemOperClick"
                                                OnClickStopPropagation>
                                <SIcon Small Tooltip="@T(isFavorited ? "CancelFavorite" :"Favorite")">mdi-star</SIcon>
                            </SAutoLoadingButton>
                        }
                    </MListItemAction>
                    @if (!context.Hover && Value.MetaData.Situation != ExpansionMenuSituation.Preview)
                    {
                        switch (Value.State)
                        {
                            case ExpansionMenuState.Selected:
                                <MIcon Small Class="mr-1" Color="primary">mdi-check</MIcon>
                                break;
                            case ExpansionMenuState.Impersonal:
                                <MIcon Small Class="mr-1" Color="red">mdi-close</MIcon>
                                break;
                            case ExpansionMenuState.Indeterminate:
                                <MIcon Small Class="mr-1" Color="primary">mdi-minus-box</MIcon>
                                break;
                            case ExpansionMenuState.Favorite:
                                <SIcon Small Style="margin-right: 6px" Color="#FFB547" Tooltip="@T("CancelFavorite")">mdi-star</SIcon>
                                break;
                        }
                    }

                </ItemContent>
            </MListItem>
        }
        else if (Value.Type == ExpansionMenuType.Element)
        {
            <MListItem @attributes="@context.Attrs" Class="@GetClass(context.Hover)" Disabled="Value.Disabled"
                       OnClick="ItemClick" Value="Value.Id" ActiveClass="GetActiveClass()" Style="@GetIsDisplayStyle(Value.MetaData.Situation == ExpansionMenuSituation.Authorization)">
                <ItemContent Context="item">
                    <MListItemContent>
                        <MListItemTitle Style="@(selected ? "color: #323D6F;" : "")">@DT(Value.Name)</MListItemTitle>
                    </MListItemContent>

                    @if (!Value.Disabled)
                    {
                        <MListItemAction Class="ma-0" Style="@GetIsDisplayStyle(context.Hover)">
                            <MCheckbox Dense Value="selected" TValue="bool"></MCheckbox>
                        </MListItemAction>
                        @if (!context.Hover)
                        {
                            switch (Value.State)
                            {
                                case ExpansionMenuState.Selected:
                                    <MIcon Small Class="mr-1" Color="primary">mdi-check</MIcon>
                                    break;
                                case ExpansionMenuState.Impersonal:
                                    <MIcon Small Class="mr-1" Color="red">mdi-close</MIcon>
                                    break;
                            }
                        }
                    }
                </ItemContent>
            </MListItem>
        }
    </MHover>

    @if (Value.GetNavDeep() == 0 && Value.Children.Any(child=>!child.Hidden))
    {
        <div class="mx-4" data-count="@Value.Children.Count(child=>!child.Hidden)" style="border: 1px dashed #E4E8F3;"></div>
    }
</div>


@foreach(var child in Value.Children)
{
    <ExpansionNavWrapper Value="child" OnItemClick="OnItemClick" OnItemOperClick="OnItemOperClick" />
}
