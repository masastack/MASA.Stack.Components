@namespace Masa.Stack.Components.Shared.GlobalNavigations
@inherits MasaComponentBase

@{
    var indeterminate = Value.State == ExpansionMenuState.Indeterminate;
    var selected = Value.State == ExpansionMenuState.Selected;
    var isFavorite = Value.State == ExpansionMenuState.Favorite;
}

<div class="expansion-nav" style="@GetIsDisplayStyle(!Value.Hidden)">
    <MHover Disabled="Value.Disabled">
        @if (Value.Type == ExpansionMenuType.Nav)
        {
            <a class="m-list-item theme--light @(Value.Disabled ? "m-list-item--disabled" : "") @GetClass(context.Hover) "
               @onclick="ItemClick"
               @attributes="@context.Attrs">
                <div class="d-flex align-center full-width">
                    <div style="font-weight: 500; font-size: 14px; @(Value.State == ExpansionMenuState.Selected ? "color: #323D6F;" : "")">
                        @DT(Value.Name)
                    </div>
                    <MSpacer />
                    <div>
                        @if (context.Hover)
                        {
                            @if (Value.MetaData.Situation == ExpansionMenuSituation.Authorization)
                            {
                                <MCheckbox Class="expansion-nav__checkbox" Color="primary" Indeterminate=indeterminate Dense Value="@(indeterminate || selected)" TValue="bool" HideDetails="true" />
                            }
                            else if (Value.MetaData.Situation == ExpansionMenuSituation.Favorite)
                            {
                                <SIcon Small
                                       Class="expansion-nav__action"
                                       Tooltip="@T(isFavorite ? "CancelFavorite" : "Favorite")"
                                       Color="@(isFavorite ? "#FFB547" : "")"
                                       OnClick="ItemOperClick"
                                       OnClickStopPropagation>
                                    mdi-star
                                </SIcon>
                            }
                        }
                        else if (!context.Hover && Value.MetaData.Situation != ExpansionMenuSituation.Preview)
                        {
                            switch (Value.State)
                            {
                                case ExpansionMenuState.Selected:
                                    <MIcon Small Class="expansion-nav__action" Color="primary">mdi-check</MIcon>
                                    break;
                                case ExpansionMenuState.Impersonal:
                                    <MIcon Small Class="expansion-nav__action" Color="red">mdi-close</MIcon>
                                    break;
                                case ExpansionMenuState.Indeterminate:
                                    <MIcon Dense Class="expansion-nav__action" Color="primary">mdi-minus-box</MIcon>
                                    break;
                                case ExpansionMenuState.Favorite:
                                    <MIcon Small Class="expansion-nav__action" Color="#FFB547">mdi-star</MIcon>
                                    break;
                            }
                        }
                    </div>
                </div>
            </a>
        }
        else if (Value.Type == ExpansionMenuType.Element)
        {
            <div class="m-list-item theme--light @(Value.Disabled ? "m-list-item--disabled" : "") @GetClass(context.Hover)"
                 style="@GetIsDisplayStyle(Value.MetaData.Situation == ExpansionMenuSituation.Authorization)"
                 @onclick="ItemClick"
                 @attributes="@context.Attrs">
                <div class="d-flex align-center full-width">
                    <div style="font-weight: 500; font-size: 14px; @(Value.State == ExpansionMenuState.Selected ? "color: #323D6F;" : "")">
                        @DT(Value.Name)
                    </div>
                    <MSpacer />
                    @if (!Value.Disabled)
                    {
                        <div style="@GetIsDisplayStyle(context.Hover)">
                            <MCheckbox Dense Value="selected" TValue="bool" HideDetails="true" Class="expansion-nav__checkbox"></MCheckbox>
                        </div>
                        @if (!context.Hover)
                        {
                            switch (Value.State)
                            {
                                case ExpansionMenuState.Selected:
                                    <MIcon Small Class="expansion-nav__action" Color="primary">mdi-check</MIcon>
                                    break;
                                case ExpansionMenuState.Impersonal:
                                    <MIcon Small Class="expansion-nav__action" Color="red">mdi-close</MIcon>
                                    break;
                            }
                        }
                    }
                </div>
            </div>
        }
    </MHover>

    @if (Value.GetNavDeep() == 0 && Value.Children.Any(child => !child.Hidden))
    {
        <div class="mx-4" data-count="@Value.Children.Count(child => !child.Hidden)" style="border: 1px dashed #E4E8F3;"></div>
    }
</div>


@foreach (var child in Value.Children)
{
    <ExpansionNavWrapper Value="child" OnItemClick="OnItemClick" OnItemOperClick="OnItemOperClick" />
}
