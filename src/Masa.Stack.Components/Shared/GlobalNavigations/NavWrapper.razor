@namespace Masa.Stack.Components.GlobalNavigations
@inherits MasaComponentBase

@{
    var indeterminate = Value.State == MenuState.Indeterminate;
    var selected = Value.State == MenuState.Selected;
    var isFavorited = Value.State == MenuState.Favorite;
}

<MHover Disabled="Value.Disabled">
    @if (Value.Type == MenuType.Nav)
    {
        <MListItem @attributes="@context.Attrs" Class="@GetClass(context.Hover)" Value="Value.ID" Disabled="Value.Disabled"
                   OnClick="SelectItem" ActiveClass="GetActiveClass()">
            <ItemContent Context="item">
                <MListItemContent>
                    <MListItemTitle Style="@(Value.State == MenuState.Selected?"color: #323D6F;":"")">@Value.Name
                    </MListItemTitle>
                </MListItemContent>
                <MListItemAction Class="ma-0" Style="@GetIsDisplayStyle(context.Hover)">
                    @if (Value.Metadata.Situation == MenuSituation.Authorization)
                    {
                        <MCheckbox Color="primary" Indeterminate=indeterminate Dense Value="@(indeterminate || selected)" />
                    }
                    else if (Value.Metadata.Situation == MenuSituation.Favorite)
                    {
                        <SAutoLoadingButton Icon XSmall Color="@(isFavorited ? "#FFB547" : "")" OnClick="AddFavorite"
                                            StopPropagation>
                            <SIcon Small Tooltip="@T(isFavorited ? "CancelFavorite" :"Favorite")">mdi-star</SIcon>
                        </SAutoLoadingButton>
                    }
                </MListItemAction>
                @if (!context.Hover)
                {
                    switch (Value.State)
                    {
                        case MenuState.Selected:
                            <MIcon Small Class="mr-1" Color="primary">mdi-check</MIcon>
                            break;
                        case MenuState.Impersonal:
                            <MIcon Small Class="mr-1" Color="red">mdi-close</MIcon>
                            break;
                        case MenuState.Indeterminate:
                            <MIcon Small Class="mr-1" Color="primary">mdi-minus-box</MIcon>
                            break;
                        case MenuState.Favorite:
                            <SIcon Small Style="margin-right: 6px" Color="#FFB547" Tooltip="@T("CancelFavorite")">mdi-star</SIcon>
                            break;
                    }
                }

            </ItemContent>
        </MListItem>
    }
    else if (Value.Type == MenuType.Element && Value.Metadata.Situation == MenuSituation.Authorization)
    {
        <MListItem @attributes="@context.Attrs" Class="@GetClass(context.Hover)" Disabled="Value.Disabled"
                   OnClick="SelectItem" Value="Value.ID" ActiveClass="GetActiveClass()">
            <ItemContent Context="item">
                <MListItemContent>
                    <MListItemTitle Style="@(selected ? "color: #323D6F;" : "")">@Value.Name</MListItemTitle>
                </MListItemContent>

                @if (!Value.Disabled)
                {
                    <MListItemAction Class="ma-0" Style="@GetIsDisplayStyle(context.Hover)">
                        <MCheckbox Dense Value="selected"></MCheckbox>
                    </MListItemAction>
                    @if (!context.Hover)
                    {
                        switch (Value.State)
                        {
                            case MenuState.Selected:
                                <MIcon Small Class="mr-1" Color="primary">mdi-check</MIcon>
                                break;
                            case MenuState.Impersonal:
                                <MIcon Small Class="mr-1" Color="red">mdi-close</MIcon>
                                break;
                        }
                    }
                }
            </ItemContent>
        </MListItem>
    }
</MHover>

@if (Value.GetNavDeep() == 0 && Value.Childrens.Count > 0)
{
    <div class="mx-4" style="border: 1px dashed #E4E8F3;"></div>
}

@foreach(var nav in Value.Childrens)
{
    <NavWrapper Value="nav" />
}
