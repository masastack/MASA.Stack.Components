@using FluentValidation
@namespace Masa.Stack.Components.Layouts
@inherits MasaComponentBase

<ADialog @bind-Value="_visible"
         Title="@T("UpdatePassword")"
         IconOfTitle="mdi-key-variant"
         OnCancel="HandleOnCancel"
         OnOk="HandleOnOk">
    <MForm Model="Model" EnableValidation @ref="_form">
        <DefaultTextField @bind-Value="Model.OldPassword"
                          Type="password"
                          Label="@T("OldPassword")"
                          HideDetails="false">
        </DefaultTextField>
        <DefaultTextField @bind-Value="Model.NewPassword"
                          Type="password"
                          Label="@T("NewPassword")"
                          HideDetails="false">
        </DefaultTextField>
        <DefaultTextField @bind-Value="Model.ConfirmNewPassword"
                          Type="password"
                          Label="@T("ConfirmNewPassword")"
                          Placeholder="@T("PlaceholderForConfirmNewPassword")"
                          HideDetails="false">
        </DefaultTextField>
    </MForm>
    <a class="primary--text caption float-right"
       @onclick="() => _forgetPasswordModal.Open()">
        @T("ForgetPassword")
    </a>
</ADialog>

<ForgetPasswordModal @ref="_forgetPasswordModal" />

@code {

    private bool _visible;
    private MForm _form = null!;
    private ForgetPasswordModal? _forgetPasswordModal;

    private UpdatePasswordModel Model { get; set; } = new();

    internal void Open()
    {
        _visible = true;
        StateHasChanged();
    }

    private async Task HandleOnCancel()
    {
        await _form.ResetAsync();
        _visible = false;
    }

    private async Task HandleOnOk()
    {
        var success = await _form.ValidateAsync();
        if (success)
        {
    // logic for update password
            await Task.Delay(1000);

            _visible = true;
        }
    }

    class UpdatePasswordModel
    {
        public string? OldPassword { get; set; }

        public string? NewPassword { get; set; }

        public string? ConfirmNewPassword { get; set; }
    }

    class UpdatePasswordModelValidator : AbstractValidator<UpdatePasswordModel>
    {
        public UpdatePasswordModelValidator(I18n i18N)
        {
    // TODO: 补全验证，如密码复杂度，长度限制等。

            RuleFor(m => m.OldPassword)
                .NotEmpty()
                .WithName(i18N.T("OldPassword"));
            RuleFor(m => m.NewPassword)
                .NotEmpty()
                .WithName(i18N.T("NewPassword"));
            RuleFor(m => m.ConfirmNewPassword)
                .NotEmpty()
                .Equal(u => u.NewPassword).WithMessage(i18N.T("FailToConfirmNewPassword"))
                .WithName(i18N.T("ConfirmNewPassword"));
        }
    }

}
