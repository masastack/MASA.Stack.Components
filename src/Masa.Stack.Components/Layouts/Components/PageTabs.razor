@using Microsoft.AspNetCore.Components.Routing
@namespace Masa.Stack.Components.Layouts
@inherits MasaComponentBase
@implements IDisposable
@inject GlobalConfig GlobalConfig

<MPageTabs Value="Value"
           Class="px-6 pagetabs"
           Items="Items">
    <TabContent>
        <MTab Value="Value"
              ActiveClass="m-page_tab_active"
              class="px-6 rounded-t-xl m-page_tab"
              Href="@context.Item.Url"
              IsActive="@context.IsActive"
              Ripple="@false"
              @attributes="@context.Attrs">
            <MIcon Size="20">@context.Item.Icon</MIcon>
            <span class="mx-2 text-capitalize @(context.IsActive ? "default--text" : "")"
                  style="min-width:46px;">@T(context.Item.Name)</span>
            @if (context.Item.Closable)
            {
                <MIcon OnClick="context.Close" Size="16">mdi-close</MIcon>
            }
        </MTab>
    </TabContent>
    <ChildContent>
        <div class="mt-6">
            @ChildContent
        </div>
    </ChildContent>
</MPageTabs>

@code {

    [Parameter, EditorRequired]
    public List<PageTabItem>? Items { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string? CurrentUrl { get; set; }

    private StringNumber Value => Items.FindIndex(item => item.Url == CurrentUrl);

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        GlobalConfig.OnLanguageChanged += base.StateHasChanged;

        NavigationManager.LocationChanged += NavigationManagerOnLocationChanged;

        base.OnInitialized();
    }

    private void NavigationManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Console.WriteLine($"{e.Location.ToString()}");
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Items ??= new List<PageTabItem>();
    }


    public void Dispose()
    {
        GlobalConfig.OnLanguageChanged -= this.StateHasChanged;

        NavigationManager.LocationChanged -= NavigationManagerOnLocationChanged;
    }

}