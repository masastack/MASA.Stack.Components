@namespace Masa.Stack.Components
@inherits MasaComponentBase

<div class="@Class d-flex">
    <div class="d-flex" style="height: 30px !important;">
        <PaginationSelect Value=PageSize ValueChanged=PageSizeChanged Items="@PageSizeSelect" />
        <div class="ml-2 mt-1 block-center caption regular3--text">@T("Rows per page")</div>
        <div class="ml-2 mt-1 block-center caption regular3--text">
            <span>@T("Total") @Total @T("Item")</span>
        </div>
    </div>
    <div class="ml-auto d-flex">
        <div @onclick=Previous class="@(PreviousDisabled?"":"hover-pointer") pa-1 regular3--text" style="width: 34px;height: 34px;background: #FFFFFF;border-radius: 34px;">
            <MIcon Disabled=PreviousDisabled Size=24>mdi-chevron-left</MIcon>
        </div>
        <div class="mx-4 my-auto regular--text overline">@Page/@TotalPage</div>
        <div @onclick=Next class="@(NextDisabled?"":"hover-pointer") pa-1 regular3--text" style="width: 34px;height: 34px;background: #FFFFFF;border-radius: 34px;">
            <MIcon Disabled=NextDisabled Size=24>mdi-chevron-right</MIcon>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public int Page { get; set; }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public EventCallback<int> PageSizeChanged { get; set; }

    [Parameter]
    public long Total { get; set; }

    [Parameter]
    public List<int> PageSizeSelect { get; set; } = new() { 10, 20, 50, 100 };

    private int TotalPage
    {
        get
        {
            var totalPage = (int)((Total + PageSize - 1) / PageSize);
            return totalPage == 0 ? 1 : totalPage;
        }
    }

    bool NextDisabled => Page == TotalPage;

    bool PreviousDisabled => Page == 1;

    async Task Next()
    {
        if (NextDisabled is false)
        {
            await PageChanged.InvokeAsync(++Page);
        }
    }

    async Task Previous()
    {
        if (PreviousDisabled is false)
        {
            await PageChanged.InvokeAsync(--Page);
        }
    }
}
