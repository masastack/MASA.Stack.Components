@namespace Masa.Stack.Components

<CascadingValue Value="this">
    @ChildContent
    <div Class="@($"d-flex flex-column {Class}")" Style="@Style">
        <LabeledRadioGroup Dense="Dense"
                           Class="@TabsClass"
                           Style="@($"width: fit-content {TabsStyle}")"
                           TValue="StringNumber"
                           Value="TabIndex"
                           ValueChanged="TabChanged">
            @for (var i = 0; i < Tabs.Count; i++)
            {
                var header = Tabs[i];
                <LabeledRadio Value="@((StringNumber)i)" MinWidth="@TabMinWidth">@header</LabeledRadio>
            }
        </LabeledRadioGroup>

        <MWindow @bind-Value="TabIndex"
                 Class="@($"full-width mx-1 {ItemsClass}")"
                 Style="@ItemsStyle">
            @for (var i = 0; i < _elevationTabItems.Count; i++)
            {
                var item = _elevationTabItems[i];
                <MWindowItem Value="@i" Class="full-height">
                    @item.ChildContent
                </MWindowItem>
            }
        </MWindow>
    </div>
</CascadingValue>

@code {

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? ItemsClass { get; set; }

    [Parameter]
    public string? ItemsStyle { get; set; }

    [Parameter]
    public string? TabsClass { get; set; }

    [Parameter]
    public string? TabsStyle { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [EditorRequired]
    [Parameter]
    public List<string> Tabs { get; set; } = new();

    [Parameter]
    public bool Dense { get; set; }

    [Parameter]
    public StringNumber TabMinWidth { get; set; } = "100";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public StringNumber TabIndex { get; set; } = 0;

    [Parameter]
    public EventCallback<StringNumber> TabIndexChanged { get; set; }

    List<ElevationTabItem> _elevationTabItems = new();

    public void AddTabItem(ElevationTabItem tabItem)
    {
        _elevationTabItems.Add(tabItem);
    }

    public void RemoveTabItem(ElevationTabItem tabItem)
    {
        _elevationTabItems.Remove(tabItem);
    }

    private async Task TabChanged(StringNumber v)
    {
        if (TabIndexChanged.HasDelegate)
        {
            await TabIndexChanged.InvokeAsync(v);
        }
        else
        {
            TabIndex = v;
        }
    }

}
