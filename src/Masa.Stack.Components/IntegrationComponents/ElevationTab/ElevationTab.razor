@namespace Masa.Stack.Components

<CascadingValue Value="this">
    @ChildContent
    <div Class="@($"d-flex flex-column {AlignItems} {Class}")" Style="@Style">
        <LabeledRadioGroup Class="@TabsClass"
                           Dense="Dense"
                           Style="@($"width: fit-content {TabsStyle}")"
                           TValue="string"
                           Value="Tab"
                           ValueChanged="ValueChanged">
            @for (var i = 0; i < Tabs!.Count; i++)
            {
                var tab = Tabs[i];
                <LabeledRadio MinWidth="@TabMinWidth" Value="@(tab)">
                    <span class="@(Tab == tab ? "subtitle2 emphasis2--text" : "btn regular2--text")">@tab</span>
                </LabeledRadio>
            }
        </LabeledRadioGroup>

        <MWindow Class="@($"full-width mx-1 {ItemsClass}")"
                 Style="@ItemsStyle"
                 Value="Tab">
            @for (var i = 0; i < Tabs!.Count; i++)
            {
                var item = _elevationTabItems.ElementAtOrDefault(i);
                if (item is not null)
                {
                    var tab = Tabs[i];
                    <MWindowItem Class="full-height" Value="@tab">
                        @item.ChildContent
                    </MWindowItem>
                }
            }
        </MWindow>
    </div>
</CascadingValue>

@code {

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? ItemsClass { get; set; }

    [Parameter]
    public string? ItemsStyle { get; set; }

    [Parameter]
    public bool Left { get; set; }

    [Parameter]
    public bool Right { get; set; }

    [Parameter]
    public string? TabsClass { get; set; }

    [Parameter]
    public string? TabsStyle { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [EditorRequired]
    [Parameter]
    public List<string>? Tabs { get; set; }

    [Parameter]
    public bool Dense { get; set; }

    [Parameter]
    public StringNumber? TabMinWidth { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Tab { get; set; }

    [Parameter]
    public EventCallback<string> TabChanged { get; set; }

    List<ElevationTabItem> _elevationTabItems = new();

    private string AlignItems
    {
        get
        {
            if (Left)
            {
                return "align-start";
            }

            if (Right)
            {
                return "align-end";
            }

            return "align-center";
        }
    }

    protected override void OnParametersSet()
    {
        Tabs ??= new List<string>();
        Tab ??= Tabs!.FirstOrDefault();
    }

    public void AddTabItem(ElevationTabItem tabItem)
    {
        _elevationTabItems.Add(tabItem);
    }

    public void RemoveTabItem(ElevationTabItem tabItem)
    {
        _elevationTabItems.Remove(tabItem);
    }

    private async Task ValueChanged(string v)
    {
        if (TabChanged.HasDelegate)
        {
            await TabChanged.InvokeAsync(v);
        }
        else
        {
            Tab = v;
        }
    }

}
