@namespace Masa.Stack.Components
@typeparam TValue

<MButtonGroup Value="_selectedKey"
              ValueChanged="SelectedKeyChanged"
              Borderless
              Mandatory
              Dense="@Dense"
              Class="@($"labeled-radio-group {Class}")"
              Style="@ComputedStyle"
              ActiveClass="@ActiveClass">
    <div class="labeled-radio-slider-wrapper" style="@CurrentHeightStyle;@CurrentWidthStyle;@LeftStyle">
        <div class="labeled-radio-slider white" style="@($"border-radius:{BorderRadius}px")"></div>
    </div>
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</MButtonGroup>

@code {

    [Inject]
    private IJSRuntime Js { get; set; } = null!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? ActiveClass { get; set; }

    [Parameter]
    public int BorderRadius { get; set; } = 8;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool Dense { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public TValue? Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    private StringNumber? _selectedKey;

    private List<LabeledRadio<TValue>> Items { get; set; } = new();

    private double CurrentItemHeight { get; set; }
    private double CurrentItemWidth { get; set; }
    private double CurrentItemOffsetLeft { get; set; }

    private string CurrentHeightStyle => $"height:{CurrentItemHeight}px";
    private string CurrentWidthStyle => $"width:{CurrentItemWidth}px";
    private string LeftStyle => $"left:{CurrentItemOffsetLeft}px";

    private string ComputedStyle => $"border-radius:{BorderRadius + 2}px; {Style}";

    protected override async Task OnParametersSetAsync()
    {
        // TODO: Value changed by input
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_selectedKey is not null && CurrentItemWidth == 0)
        {
            await SelectedKeyChanged(_selectedKey);
            StateHasChanged();
        }
    }
    
    private async Task SelectedKeyChanged(StringNumber? val)
    {
        var item = Items.FirstOrDefault(item => item.Instance?.Value == val);
        if (item is not null)
        {
            if (item.Width == 0)
            {
                await UpdateItemClientRect(item);
            }
            
            CurrentItemHeight = item.Height;
            CurrentItemWidth = item.Width;
            CurrentItemOffsetLeft = item.OffsetLeft;

            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(item.Value);
            }
            else
            {
                Value = item.Value;
            }
        }

        _selectedKey = val;
    }

    internal async Task AddRadio(LabeledRadio<TValue> radio)
    {
        if (!Items.Contains(radio))
        {
            Items.Add(radio);
        }
    }

    private async Task UpdateItemClientRect(LabeledRadio<TValue> radio)
    {
        var rect = await Js.InvokeAsync<BlazorComponent.Web.Element>(JsInteropConstants.GetDomInfo, radio.Instance!.Ref);

        radio.Height = rect.ClientHeight;
        radio.Width = rect.ClientWidth;
        radio.OffsetLeft = rect.OffsetLeft;
    }

}
